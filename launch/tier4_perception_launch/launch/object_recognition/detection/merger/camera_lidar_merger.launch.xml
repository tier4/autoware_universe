<?xml version="1.0"?>
<launch>
  <!-- Parameters -->
  <arg name="object_recognition_detection_object_merger_data_association_matrix_param_path" default="$(find-pkg-share object_merger)/config/data_association_matrix.param.yaml"/>
  <arg name="object_recognition_detection_object_merger_distance_threshold_list_path" default="$(find-pkg-share object_merger)/config/overlapped_judge.param.yaml"/>

  <!-- Pipeline junctions -->
  <arg name="lidar_detection_model"/>
  <arg name="use_detection_by_tracker"/>

  <arg name="use_validator" default="true" description="use obstacle_pointcloud based validator"/>
  <arg name="use_pointcloud_map"/>
  <arg name="objects_validation_method" default="obstacle_pointcloud"/>

  <arg name="objects_filter_method" default="lanelet_filter"/>
  <arg name="use_object_filter" default="true" description="use object filter"/>
  <let name="without_dbt_and_filter" value="$(eval &quot;'$(var use_detection_by_tracker)'=='false' and '$(var use_object_filter)'=='false' &quot;)"/>

  <!-- external interfaces -->
  <arg name="input/pointcloud_map/pointcloud" default="/perception/object_recognition/detection/pointcloud_map_filtered/pointcloud"/>
  <arg name="input/obstacle_segmentation/pointcloud" default="/perception/obstacle_segmentation/pointcloud"/>
  <arg name="input/lidar_ml/objects" default="$(var lidar_detection_model)/objects"/>
  <arg name="input/lidar_rule/objects" default="clustering/camera_lidar_fusion/objects"/>
  <arg name="input/detection_by_tracker/objects" default="detection_by_tracker/objects"/>
  <arg name="output/objects" default="objects"/>

  <!-- internal interfaces -->
  <let name="camera_roi_fusion/input/objects" value="$(var input/lidar_ml/objects)"/>
  <let name="camera_roi_fusion/output/objects" value="$(var lidar_detection_model)/roi_fusion/objects"/>

  <let name="validator/input/objects" value="$(var camera_roi_fusion/output/objects)"/>
  <let name="validator/input/obstacle_pointcloud" value="$(var input/pointcloud_map/pointcloud)" if="$(var use_pointcloud_map)"/>
  <let name="validator/input/obstacle_pointcloud" value="$(var input/obstacle_segmentation/pointcloud)" unless="$(var use_pointcloud_map)"/>
  <let name="validator/output/objects" value="$(var lidar_detection_model)/validation/objects"/>

  <let name="merger1/input/objects0" value="$(var validator/output/objects)" if="$(var use_validator)"/>
  <let name="merger1/input/objects0" value="$(var input/lidar_ml/objects)" unless="$(var use_validator)"/>
  <let name="merger1/input/objects1" value="$(var input/lidar_rule/objects)"/>
  <let name="merger1/output/objects" value="$(var output/objects)" if="$(var without_dbt_and_filter)"/>
  <let name="merger1/output/objects" value="$(var lidar_detection_model)_roi_cluster_fusion/objects" unless="$(var without_dbt_and_filter)"/>

  <let name="merger2/input/objects0" value="$(var merger1/output/objects)"/>
  <let name="merger2/input/objects1" value="$(var input/detection_by_tracker/objects)"/>
  <let name="merger2/output/objects" value="objects_before_filter" if="$(var use_object_filter)"/>
  <let name="merger2/output/objects" value="$(var output/objects)" unless="$(var use_object_filter)"/>

  <let name="filter/input/objects" value="$(var merger2/output/objects)" if="$(var use_detection_by_tracker)"/>
  <let name="filter/input/objects" value="$(var merger1/output/objects)" unless="$(var use_detection_by_tracker)"/>
  <let name="filter/output/objects" value="$(var output/objects)"/>

  <!-- Camera ROI fusion -->
  <group>
    <include file="$(find-pkg-share image_projection_based_fusion)/launch/roi_detected_object_fusion.launch.xml">
      <arg name="input/camera_info0" value="$(var camera_info0)"/>
      <arg name="input/rois0" value="$(var detection_rois0)"/>
      <arg name="input/camera_info1" value="$(var camera_info1)"/>
      <arg name="input/rois1" value="$(var detection_rois1)"/>
      <arg name="input/camera_info2" value="$(var camera_info2)"/>
      <arg name="input/rois2" value="$(var detection_rois2)"/>
      <arg name="input/camera_info3" value="$(var camera_info3)"/>
      <arg name="input/rois3" value="$(var detection_rois3)"/>
      <arg name="input/camera_info4" value="$(var camera_info4)"/>
      <arg name="input/rois4" value="$(var detection_rois4)"/>
      <arg name="input/camera_info5" value="$(var camera_info5)"/>
      <arg name="input/rois5" value="$(var detection_rois5)"/>
      <arg name="input/camera_info6" value="$(var camera_info6)"/>
      <arg name="input/rois6" value="$(var detection_rois6)"/>
      <arg name="input/camera_info7" value="$(var camera_info7)"/>
      <arg name="input/rois7" value="$(var detection_rois7)"/>
      <arg name="input/camera_info8" value="$(var camera_info8)"/>
      <arg name="input/rois8" value="$(var detection_rois8)"/>
      <arg name="input/rois_number" value="$(var image_number)"/>
      <arg name="input/image0" value="$(var image_raw0)"/>
      <arg name="input/image1" value="$(var image_raw1)"/>
      <arg name="input/image2" value="$(var image_raw2)"/>
      <arg name="input/image3" value="$(var image_raw3)"/>
      <arg name="input/image4" value="$(var image_raw4)"/>
      <arg name="input/image5" value="$(var image_raw5)"/>
      <arg name="input/image6" value="$(var image_raw6)"/>
      <arg name="input/image7" value="$(var image_raw7)"/>
      <arg name="input/image8" value="$(var image_raw8)"/>
      <arg name="input/objects" value="$(var camera_roi_fusion/input/objects)"/>
      <arg name="output/objects" value="$(var camera_roi_fusion/output/objects)"/>
      <arg name="param_path" value="$(var roi_detected_object_fusion_param_path)"/>
    </include>
  </group>

  <!-- Validator -->
  <group>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/object_recognition/detection/filter/object_validator.launch.xml">
      <arg name="input/obstacle_pointcloud" value="$(var validator/input/obstacle_pointcloud)"/>
      <arg name="input/objects" value="$(var validator/input/objects)"/>
      <arg name="output/objects" value="$(var validator/output/objects)"/>
      <arg name="objects_validation_method" value="$(var objects_validation_method)"/>
    </include>
  </group>

  <!-- 1st merger: camera_lidar_fusion + lidar cluster-->
  <group>
    <include file="$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml">
      <arg name="input/object0" value="$(var merger1/input/objects0)"/>
      <arg name="input/object1" value="$(var merger1/input/objects1)"/>
      <arg name="output/object" value="$(var merger1/output/objects)"/>
      <arg name="priority_mode" value="0"/>
      <arg name="data_association_matrix_path" value="$(var object_recognition_detection_object_merger_data_association_matrix_param_path)"/>
      <arg name="distance_threshold_list_path" value="$(var object_recognition_detection_object_merger_distance_threshold_list_path)"/>
    </include>
  </group>

  <!-- 2nd merger: + detection_by_tracker -->
  <group if="$(var use_detection_by_tracker)">
    <include file="$(find-pkg-share object_merger)/launch/object_association_merger.launch.xml">
      <arg name="input/object0" value="$(var merger2/input/objects0)"/>
      <arg name="input/object1" value="$(var merger2/input/objects1)"/>
      <arg name="output/object" value="$(var merger2/output/objects)"/>
      <arg name="priority_mode" value="0"/>
      <arg name="data_association_matrix_path" value="$(var object_recognition_detection_object_merger_data_association_matrix_param_path)"/>
      <arg name="distance_threshold_list_path" value="$(var object_recognition_detection_object_merger_distance_threshold_list_path)"/>
    </include>
  </group>

  <!-- Filter -->
  <group>
    <include file="$(find-pkg-share tier4_perception_launch)/launch/object_recognition/detection/filter/object_filter.launch.xml" if="$(var use_object_filter)">
      <arg name="objects_filter_method" value="$(var objects_filter_method)"/>
      <arg name="input/objects" value="$(var filter/input/objects)"/>
      <arg name="output/objects" value="$(var filter/output/objects)"/>
    </include>
  </group>
</launch>
