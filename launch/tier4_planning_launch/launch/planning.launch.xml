<launch>
  <!-- planning module -->
  <arg name="input_objects_topic" default="/perception/object_recognition/objects"/>
  <arg name="input_pointcloud_topic" default="/perception/obstacle_segmentation/pointcloud"/>

  <!-- Whether to use perception filter -->
  <arg name="use_perception_filter" default="false" description="launch perception filter for external approval"/>

  <!-- Conditional topic remapping based on perception filter usage -->
  <let name="objects_topic" value="/perception/object_recognition/filtered_objects" if="$(var use_perception_filter)"/>
  <let name="objects_topic" value="$(var input_objects_topic)" unless="$(var use_perception_filter)"/>
  <let name="pointcloud_topic" value="/perception/obstacle_segmentation/filtered_pointcloud" if="$(var use_perception_filter)"/>
  <let name="pointcloud_topic" value="$(var input_pointcloud_topic)" unless="$(var use_perception_filter)"/>

  <!-- mission planner -->
  <arg name="mission_planner_param_path"/>
  <!-- parking -->
  <arg name="freespace_planner_param_path"/>
  <!-- planning validator -->
  <arg name="planning_validator_param_path"/>
  <arg name="planning_validator_latency_checker_param_path"/>
  <arg name="planning_validator_trajectory_checker_param_path"/>
  <arg name="planning_validator_intersection_collision_checker_param_path"/>
  <!-- Auto mode setting-->
  <arg name="enable_all_modules_auto_mode"/>
  <arg name="is_simulation"/>

  <group>
    <push-ros-namespace namespace="planning"/>
    <!-- mission planning module -->
    <group>
      <push-ros-namespace namespace="mission_planning"/>
      <include file="$(find-pkg-share tier4_planning_launch)/launch/mission_planning/mission_planning.launch.xml">
        <arg name="mission_planner_param_path" value="$(var mission_planner_param_path)"/>
      </include>
    </group>

    <!-- scenario planning module -->
    <group>
      <push-ros-namespace namespace="scenario_planning"/>
      <include file="$(find-pkg-share tier4_planning_launch)/launch/scenario_planning/scenario_planning.launch.xml">
        <arg name="enable_all_modules_auto_mode" value="$(var enable_all_modules_auto_mode)"/>
        <arg name="is_simulation" value="$(var is_simulation)"/>
        <arg name="input_objects_topic" value="$(var objects_topic)"/>
        <arg name="input_pointcloud_topic" value="$(var pointcloud_topic)"/>
      </include>
    </group>

    <!-- planning validator -->
    <group>
      <include file="$(find-pkg-share autoware_planning_validator)/launch/planning_validator.launch.xml">
        <arg name="container_type" value="component_container_mt"/>
        <arg name="input_trajectory" value="/planning/scenario_planning/velocity_smoother/trajectory"/>
        <arg name="output_trajectory" value="/planning/scenario_planning/trajectory"/>
        <arg name="planning_validator_param_path" value="$(var planning_validator_param_path)"/>
        <arg name="planning_validator_latency_checker_param_path" value="$(var planning_validator_latency_checker_param_path)"/>
        <arg name="planning_validator_trajectory_checker_param_path" value="$(var planning_validator_trajectory_checker_param_path)"/>
        <arg name="planning_validator_intersection_collision_checker_param_path" value="$(var planning_validator_intersection_collision_checker_param_path)"/>
      </include>
    </group>

    <!-- planning evaluator -->
    <group>
      <include file="$(find-pkg-share autoware_planning_evaluator)/launch/planning_evaluator.launch.xml"/>
    </group>

    <!-- mission remaining distance and time calculator -->
    <group>
      <include file="$(find-pkg-share autoware_remaining_distance_time_calculator)/launch/remaining_distance_time_calculator.launch.xml"/>
    </group>
  </group>

  <!-- Perception Filter -->
  <group if="$(var use_perception_filter)">
    <include file="$(find-pkg-share autoware_perception_filter)/launch/perception_filter.launch.xml">
      <arg name="input_objects" value="/perception/object_recognition/objects"/>
      <arg name="input_pointcloud" value="/perception/obstacle_segmentation/pointcloud"/>
      <arg name="output_filtered_objects" value="/perception/object_recognition/filtered_objects"/>
      <arg name="output_filtered_pointcloud" value="/perception/obstacle_segmentation/filtered_pointcloud"/>
      <arg name="perception_filter_param_path" value="$(find-pkg-share autoware_launch)/config/perception/perception_filter/perception_filter.param.yaml"/>
    </include>
  </group>
</launch>
